# beipack https://github.com/allisonkarlitskaya/beipack

from binascii import a2b_base64
import importlib.abc
import importlib.resources.abc
import importlib.util
import io
import sys
from typing import Dict, BinaryIO, Iterator


class BeipackLoader(importlib.abc.SourceLoader, importlib.abc.MetaPathFinder):
    class ResourceReader(importlib.resources.abc.ResourceReader):
        def __init__(self, contents: Dict[str, bytes], filename: str) -> None:
            self._contents = contents
            self._dir = f'{filename}/'

        def is_resource(self, resource: str) -> bool:
            return f'{self._dir}{resource}' in self._contents

        def open_resource(self, resource: str) -> BinaryIO:
            return io.BytesIO(self._contents[f'{self._dir}{resource}'])

        def resource_path(self, resource: str) -> str:
            raise FileNotFoundError

        def contents(self) -> Iterator[str]:
            dir_length = len(self._dir)
            result = set()

            for filename in self._contents:
                if filename.startswith(self._dir):
                    try:
                        next_slash = filename.index('/', dir_length)
                    except ValueError:
                        next_slash = None
                    result.add(filename[dir_length:next_slash])

            return iter(result)

    def __init__(self, contents):
        try:
            contents[__file__] = __self_source__
        except NameError:
            pass

        self.contents = contents
        self.modules = {
            self.get_fullname(filename): filename
            for filename in contents
            if filename.endswith(".py")
        }

    def get_fullname(self, filename):
        assert filename.endswith(".py")
        filename = filename[:-3]
        if filename.endswith("/__init__"):
            filename = filename[:-9]
        return filename.replace("/", ".")

    def get_resource_reader(self, fullname):
        return BeipackLoader.ResourceReader(self.contents, fullname.replace('.', '/'))

    def get_data(self, path):
        return self.contents[path]

    def get_filename(self, fullname):
        return self.modules[fullname]

    def find_spec(self, fullname, path, target=None):
        if fullname not in self.modules:
            return None
        return importlib.util.spec_from_loader(fullname, self)
